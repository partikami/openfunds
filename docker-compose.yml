name: openfunds
services:
  # Backend Service
  server:
    build:
      context: ./server
      target: production
    restart: unless-stopped
    networks:
      - openfunds-network
    # Server will only be accessed internally by the client (Nginx) container.
    # No 'ports' mapping needed to the host for the backend.
    environment:
      NODE_ENV: production
      PORT: 5050 # This is the port your Express app listens on *inside* its container
      ATLAS_URI: ${ATLAS_URI}
      JWT_SECRET: ${JWT_SECRET}
      MAILTRAP_TOKEN: ${MAILTRAP_TOKEN}
      # Backend CORS: The origin should be your NAS IP/Domain
      # Or, if Nginx is configured to pass a specific Origin header, allow that.
      # Let's adjust backend's CORS to allow the NAS IP/hostname.
      # We'll also allow the internal 'client' (Nginx) service name if needed for direct testing.
      CORS_ORIGIN: "http://192.168.15.13,http://dsm1.ipartin.com" # Update this in your server's code

    volumes:
      - server-uploads:/app/uploads

  # Frontend Service (now *is* the Nginx server serving the frontend)
  client:
    build:
      context: ./client
      target: production # This target builds the Nginx image with your frontend
      args:
        - VITE_API_BASE_URL=/api # Pass this build arg to the client's Dockerfile
    restart: unless-stopped
    networks:
      - openfunds-network
    ports:
      - "80:80" # Map host port 80 to this client container's Nginx (port 80)
      # - "443:443" # For HTTPS
    depends_on:
      - server # Ensure backend is up before Nginx tries to proxy to it
    # Volume to copy Nginx config from host to container
    # Make sure you create an 'nginx' folder in your root directory and put 'nginx.conf' there
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Read-only mount

networks:
    openfunds-network:
      driver: bridge

volumes:
  server-uploads: